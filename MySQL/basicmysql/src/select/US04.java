package select;

/**
 * 【运算符】
 * 【算数运算符】+ - * / %
 *  整数类型 +/* 整数类型 = 整数类型
 *  整数类型 +/* 浮点类型 = 浮点类型
 *  在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。✔但是在MySQL中+只表示数值相加。
 *   如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算（MySQL中字符串拼接要使用字符串函数CONCAT()实现）
 *  所有运算符或列值遇到null值，运算的结果都为null
 *  ✔一个数除以另一个数后，不管是否能除尽，结果都为一个浮点数；
 *  一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后4位；
 *  在MySQL中，一个数除以0为NULL。
 *  取模（求余）运算，结果的符号与被模数相同
 *
 * 【比较运算符】比较的结果为真则返回1，比较的结果为假则返回0，其他情况则返回NULL
 *  1）符号类运算符
 *      = 与 <=>
 *          ✔如果等号两边的值都为字符串，则按照字符串的ANSI编码进行比较
 *          ✔如果等号两边的值一个是整数，另一个是字符串，在MySQL中会先尝试转成数值，如果转失败。就按0计算
 *          如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。
 *            如SELECT...FROM...WHERE last_name = null,不会有任何结果，因为只有返回结果为1才会输出
 *          安全等于运算符（<=>）与等于运算符（=）的作用相似，唯一的区别是‘<=>’可以用来对NULL进行判断。
 *           在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL时，其返回值为0，而不为NULL。
 *      不等于运算符（<>和!=），>，>=,<,<=
 *          此类运算符在null值参与时，不知道结果可以先测试一下。如 SELECT 3!=2, '4'!=null, null!=null FROM DUAL
 *  2）非符号类运算符
 *      IS NULL:判断一个值是否为NULL。如 SELECT...FROM...WHERE last_name IS NULL
 *      ISNULL: 判断一个值是否为NULL。如 SELECT...FROM...WHERE ISNULL(last_name)
 *      IS NOT NULL: 判断一个值是否不为NULL。如 SELECT...FROM...WHERE last_name IS NOT NULL
 *      LEAST(值1，值2，...，值n): 最小值运算符。当参数是整数或者浮点数时，LEAST将返回其中最小的值；
 *     当参数为字符串时，返回字母表中顺序最靠前的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。
 *      GREATEST(值1，值2，...，值n)：最大值运算符。同上
 *      BETWEEN AND运算符：区间运算符。查询条件A和条件B范围内的数据，包含边界。如SELECT...FROM...WHERE BETWEEN A AND B
 *      IN(set) ：判断给定的值是否是IN列表中的一个值
 *      NOT IN(set)：判断给定的值是否不是IN列表中的一个值
 *      LIKE: LIKE运算符主要用来匹配字符串，通常用于模糊匹配。LIKE运算符通常使用如下通配符:
 *         "%"：匹配0个或多个字符。
 *         "_"：只能匹配一个字符。
 *         如SELECT...FROM...WHERE last_name LIKE '_\_a%'。查找名字中第二个字符是下划线，第四个字符是a的员工
 *      REGEXP：正则表达式运算符。 如：SELECT 'atguigu' REGEXP '[ab]',判断查询常数中是否包含a或者b
 *
 * 【逻辑运算符】对boolean型的运算结果，都可以使用逻辑运算符。如NOT LIKE, NOE BETWEEN AND...
 *   NOT或!   ：逻辑非运算符
 *   AND或&&  ：逻辑与运算符
 *   OR或||   ：逻辑或运算符
 *   XOR      ：逻辑异或运算符。追求‘异’。存在不同输出1
 *   注意：AND的优先级高于OR，因此先对AND两边的操作数进行操作，再与OR中的操作数结合
 *
 * 【位运算符】位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算，最后将计算结果从二进制变回十进制数
 *   &     ：按位与运算符 按位与
 *   |     ：按位或运算符 按位或
 *   ~     ：按位取反运算符 按位取反
 *   >>    ：按位右移运算符 按位右移。右移一位，相当于/2
 *   <<    ：按位左移运算符 按位左移。左移一位，相当于*2
 *
 *
 @author Alex
 @create 2023-01-13-11:13
 */
public class US04 {
}
