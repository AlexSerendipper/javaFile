package basic;

/**
 * 【流程控制】和java一样一样的，我直接复制过来了，唯独是多了for in循环，和Array.foreach循环
 * 【程序流程控制】
 * 【一、顺序结构】程序从上到下逐行地执行，中间没有任何判断和跳转
 *
 * 【二、分支结构】根据条件，选择性地执行某段代码
 *     1）分支结构1。多用于判断条件是一个范围的情况✔当多个条件是“包含”关系时，请遵循“上小下大"原则✔
 *        若要省略了{}，若下面有多行语句，只能写一行!!!
 *        else if 为可选项
 *         if (条件表达式1) {
 *             语句1；
 *         } else if (条件表达式2)  {
 *             语句2；
 *          ....
 *         } else {
 *             // 上述条件都不成立执行此处代码
 *         }
 *      2）分支结构2。多用于判断条件是一个定值（只能用于六种类型，byte/short/char/int/枚举类型/string）✔
 *        常用一个变量作为表达式
 *        case只能声明定值，不能声明一个范围
 *        ✔如果某一个被匹配上case不写break，输出后会执行下一个case直到遇到break或是直接运行到程序末尾
 *        switch(表达式){
 *             case value1:
 *                 // 表达式 全等于 value1 时要执行的代码
 *                 break;
 *             case value2:
 *                 // 表达式 全等于 value2 时要执行的代码
 *                 break;
 *             default:
 *                 // 表达式 不等于任何一个 value 时要执行的代码
 *         }
 *      3）分支结构3。
 *        返回值为布尔值时，可以直接用作条件判断 (只要判断的对象不是空或者undefined都是true)
 *        obj1[name]。当该对象有该属性时，就执行该分支
 *         if(obj1[name]){
 *             // 语句1
 *         }
 *
 * 【三、循环结构】根据循环条件，重复性的执行某段代码。
 *      1）循环结构1:for循环
 *       初始化变量是声明的新的变量，条件表达式为终止的条件，操作表达式用于变量更新（递增或递减）
 *       执行顺序为：生成初始化变量 → 判断条件表达式 → 执行循环体 → 执行操作表达式 → 判断条件表达式..
 *       其中for(;;)可以建立一个无限循环
 *          for(初始化变量; 条件表达式; 操作表达式 ){
 *                  //循环体
 *           }
 *      2）循环结构2：while循环
 *       初始化变量定义在循环外
 *       多用于判断条件比较复杂的情况✔
 *       while(true)建立一个无限循环
 *         定义初始化变量
 *         while (条件表达式) {
 *                     // 操作表达式
 *                     // 循环体代码
 *        }
 *     3)循环结构3：do while循环
 *      先执行一次循环体，再去判断条件，如果条件为TRUE，则继续执行循环体
 *       定义初始化变量
 *       do {
 *            // 循环体
 *            // 操作表达式
 *        } while(条件表达式);
 *     4)循环结构4：JS特有for...in遍历对象
 *       for (var k in Person) {                                         # k变量指代的是属性名
 *           console.log(Person[k]);                                   # ✔规范，必须使用括号的形式
 *       }
 *
 *     5）循环结构5： .forEach遍历数组。当然，遍历数组用for循环也行
 *        arr1.forEach((elem, index) => { console.log(elem, index); });            # index为索引，elem为值
 *        arr1.forEach(function(elem, index) { console.log(elem, index); });       # index为索引，elem为值
 *     6)循环结构6:循环嵌套、内部循环结束后跳到外边的循环
 *      for (外循环的初始; 外循环的条件; 外循环的操作表达式) {
 *          for (内循环的初始; 内循环的条件; 内循环的操作表达式) {
 *              //循环体
 *         }
 *      }
 *
 * 【特殊关键字的使用】
 *  1）break()
 *    break语句用于终止某个语句块的执行
 *    主要用于switch语句和循环语句中
 *    break语句出现在多层嵌套的语句块中时，默认退出最近一层循环
 *    break语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块。见下方例子
 *  2）continue()
 *    continue只能使用在循环结构中
 *    continue语句用于跳过其所在循环语句块的一次执行，继续下一次循环
 *    continue语句出现在多层嵌套的语句块中时，默认退出最近一层循环的当此循环
 *    continue语句出现在多层嵌套的循环语句体中时，可以通过标签指明要跳过的是哪一层循环
 *  3)return
 *    它的功能是结束一个方法。当一个方法执行到一个return语句时，这个方法将被结束
 *    return直接结束整个方法，不管这个return处于多少层循环之内
 *  4）typeof var1返回数据类型
 @author Alex
 @create 2023-01-27-10:57
 */
public class UB04 {
}
