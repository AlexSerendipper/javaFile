package useoop;

/**
 * 【继承性】
 *  多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。
 *     class Subclass extends SuperClass{ }  类继承语法规则
 *   子类、派生类 、 subclass
 *    父类、超类、基类、superclass
 *  继承性作用：
 *    1）继承的出现减少了代码冗余，提高了代码的复用性。
 *    2）继承的出现，更有利于功能的扩展。
 *    3）继承的出现让类与类之间产生了关系，提供了多态的前提。
 *  子类继承了父类，就继承了父类的方法和属性。
 *  ✔在子类中，可以使用父类中定义的方法和属性，也可以创建新的数据和方法。即子类不是父类的子集，而是对父类的“扩展”
 *  ✔子类不能直接访问父类中私有的(private)的成员变量和方法
 *  ✔java只支持单继承和多层继承，不允许多重继承（一个子类只能有一个父类）
 *  子父类是一个相对的概念（分为直接继承和间接继承）
 *  如果没有显式定义一个类的父类，则该类继承于java.lang.object类（所有的类都直接或间接的继承于object类）
 *
 * 【方法重写】
 *  方法重写：在子类中可以根据需要对从父类中继承来的方法进行改造，也称为方法的重置、覆盖。在程序执行时，子类的方法将覆盖父类的方法。
 *  重写要求：很复杂，实际操作中和父类完全一样就行了
 *    1）子类重写的方法必须和父类被重写的方法具有相同的方法名称、参数列表
 *    2）子类重写的方法的返回值类型不能大于父类被重写的方法的返回值类型
 *        父类被重写的方法返回值是void，则子类重写的方法返回值只能是void
 *        若返回值为引用数据类型，子类重写方法的返回值类型必须包含于（小于等于）被重写的方法的返回值类型，例如string含于object
 *        若返回值为基本数据类型： 子类重写方法的返回值类型必须与父类相同
 *    3）子类重写的方法使用的访问权限不能小于父类被重写的方法的访问权限
 *        子类不能重写父类中声明为private权限的方法
 *    4）子类方法抛出的异常不能大于父类被重写方法的异常
 *    5）✔子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为static的（不是重写）。
 *       因为static方法是属于类的，子类无法覆盖父类的方法。
 *
 @author Alex
 @create 2023-01-10-13:43
 */
public class UO07 {
}
