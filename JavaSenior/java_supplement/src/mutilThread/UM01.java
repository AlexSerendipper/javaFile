package mutilThread;

/**
 * 【程序/进程/线程】
 *  程序(program)：是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码（qq.exe、powerpoint.exe）！
 *  进程(process)：是程序的一次执行过程（或是正在运行的一个程序）。✔是系统进行资源分配和调度的基本单位（即程序启动后 在内存中为其分配空间）。
 *  线程(thread)：进程可进一步细化为线程，是一个程序内部的一条执行路径。✔是程序执行的基本单位。
 *
 * 【线程调度/切换】
 *  程序的执行过程（CPU读取内存中进程的过程）：CPU中的三个组件（PC、register、ALU），PC存储指令的地址，Register读取进程中的数据，ALU进行计算处理后 将结果返回给内存。
 *  线程调度：每个进程都有各自的多个线程，这么多的线程，是通过OS（操作系统）来进行调度的。。。
 *   线程切换（context switch）：其中，CPU读取指令 ==> 保存现场 ==> 执行新线程 ==> 恢复现场继续执行原线程这样一个过程，称为线程的切换
 *      了解了线程切换概念，我们知道了线程不是越多越好，如果线程太多，会把时间浪费在切换线程上
 *      所以我们才需要有线程池的概念，提前建立好一些线程，控制好总线程数量，避免大量的线程切换
 *  超线程：即一个ALU对应多个(PC + REGISTER)，如4核8线程。。。 具体说来即为一颗cpu中装配两套 PC + REGISTER，一套保存一个线程的数据，这样在线程切换时只需要将ALU指向另一套即可，省去了 保存现场/恢复现场 的流程
 *
 * 【对象在内存中的结构】即对象加载到JVM堆中的内存结构
 *  普通对象包含的结构
 * （1）markword对象头，8字节（64bit）
 *   锁的信息记录在markword中，如syschronized(new Object())，锁的信息就记录在这个Object对象的markword中
 *   GC相关信息，如分代年龄等...具体布局见xmind
 * （2）class point类型指针，指向所属类，4字节（注意对象指针如果没有被压缩则占8字节，JVM默认开启指针压缩，所以占4字节）
 * （3）instance data实例数据，所含变量字节（如 int为4个字节），本例为0字节
 * （4）padding对齐，将字节数补充至8的倍数（最终所有的java对象所占内存都能被8整除），方便JVM处理，本例为 4字节
 *  ✔即，new Object()在内存中占了16字节！！
 *  若为数组对象，包含的结构中 除了普通对象包含的结构外，还有一个专门记录数组长度的结构
 *
 @author Alex
 @create 2023-06-21-10:24
 */
public class UM01 {

}
