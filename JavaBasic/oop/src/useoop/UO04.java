package useoop;

/**
 *【封装与隐藏】
 *  隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。
 * 通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。
 *  Java中通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx()和setXxx()实现对该属性的操作，以实现：
 *   1)隐藏一个类中不需要对外提供的实现细节；
 *   2)使用者只能通过事先定制好的方法来访问数据，可以方便地加入控制逻辑，限制对属性的不合理操作；
 *   3)便于修改，增强代码的可维护性；
 *  一个类文件(源文件)中只有一个类可以用Public修饰，且必须与文件名同名（所以通常情况下一个类文件中只有一个类）
 *
 * 【四种权限修饰符】
 *  用来修饰属性、方法、构造器、内部类
 *  对于class的权限修饰只可以用public和default(缺省)
 *                       修饰符                类内部        同一个包          不同包的子类          同一个工程
 *                       private                Yes
 *                       default(缺省)          Yes           Yes
 *                       protected              Yes           Yes               Yes
 *                       public                 Yes           Yes               Yes                  Yes
 *
 @author Alex
 @create 2023-01-10-12:59
 */
public class UO04 {
}
