package basicfunction;

/**
 * 【redis管道】了解
 *  redis管道的由来：Redis是一种基于 客户端-服务端的模型 以及 请求/响应协议的TCP服务。一个请求会遵循步骤：发送命令 → 命令排队 → 命令执行 → 返回结果
 *   管道(pipeline)可以一次性发送多条命令给服务端。服务端依次处理完完毕后，通过一条响应一次性将结果返回，管道通过减少客户端 与 redis的通信次数来实现降低往返延时时间。
 *  redis管道总结：是一种批处理命令变种优化措施，类似于redis的原生批命令（mget 和 mset）
 *
 * 【redis管道的使用】
 *  将需要使用管道的命令写在cmd.txt文件中，使用pipe命令在linux中执行！！
 *   cat cmd.txt | redis-cli -a qqabcd --pipe
 *
 * 【Pipeline vs 原生批量命令】
 *  原生批量命令是原子性（如：mset，mget），pipeline是非原子性
 *  原生批量命令一次只能执行一种命令，无法执行跨类型命令，pipeline支持批量执行不同命令
 *  ✔原生批命令是服务端实现，而pipeline需要服务端与客户端共同完成
 *
 * 【Pipeline vs 事务对比】
 *  事务具有原子性（不能保证），而管道不具有原子性
 *  管道一次性将多条命令发送到服务器，事务是一条一条发的，事务只有在接收到exec命令后才会执行，管道不会（管道是批处理执行）
 *  执行事务时会阻塞其他命令的执行，而执行管道中的命令时不会
 *
 * 【Pipeline 注意事项】
 *  ✔pipeline缓冲的指令只是会依次执行，不保证原子性，如果执行中指令发生异常，将会继续执行后续的指令✔
 *  使用pipeline组装的命令个数不能太多，否则数据量过大 客户端 阻塞的时间可能过久，同时服务器也被迫回复一个队列答复，占用很多内存
 *
 @author Alex
 @create 2023-03-31-18:14
 */
public class UBF09 {
}
