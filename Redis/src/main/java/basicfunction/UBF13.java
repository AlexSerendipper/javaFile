package basicfunction;

/**
 * 【Redis集群（cluster）】N主N从
 *  若业务量过重，单个Master的复制集（大量的写操作命令集）将难以承担，因此我们需要让Master水平扩展。
 *   每个master只负责 整个操作命令集 的一部分（即外部指令传给某一个master），这就是Redis的集群，
 *   当一个节点宕机，其后的slave立刻顶上，最终实现海量数据的高可用
 *  集群的功能：
 *    Redis集群支持多个Master，每个Master又可以挂载多个Slave，实现了海量数据的高可用
 *    由于Cluster自带Sentinel的故障转移机制，内置了高可用的支持，无需再去使用哨兵功能！
 *    客户端和Redis的节点连接，不再需要连接集群中所有节点，只需连接集群中的任意一个可用节点即可
 *    槽位slot负责分配到各个物理服务节点，由对应的集群来负责维护节点、插槽和数据之间的关系
 *
 * 【Redis集群分布式存储】槽位映射的3种解决方法
 *  分片：分片就是将你的数据拆分到多个 Redis 实例的过程
 *
 * 【一：哈希取余分片】
 *  hash(key) % 节点数
 *  优点：简单粗暴，直接有效，只需要预估好数据规划节点例如3台、8台、10台，就能保证一段时间的数据支撑。
 *         使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡+分而治之的作用。
 *  缺点：直接规划好节点，进行扩容或者缩容会很麻烦，不管扩还是缩，每次数据变动会导致节点有变动，映射关系都要重新计算（Hash(key)/3会变成Hash(key) /?）
 *
 * 【二：一致性哈希算法分片】
 * i: 使用hash算法，得到的值在一个线性区间中[0,2^32-1]，我们通过适当的逻辑控制将它首尾相连(0 = 2^32),这样让它逻辑上形成了一个环形空间。
 *    哈希取余分区是对节点（服务器）的数量进行取模。而一致性Hash算法是对2^32取模~
 * ii: 将各个服务器IP进行哈希，这样每台机器就能确定其在哈希环上的位置
 * iii: 当我们需要存储一个key时，首先用相同的hash算法计算hash(key)，确定此数据在环上的位置，从此位置沿环顺时针“行走”，
 *      第一台遇到的服务器就是其应该定位到的服务器，并将该键值对存储在该节点上。
 *  优点：（1）容错性高:如有三个节点ABC, 假如B挂了，受到影响的只是A、B之间的数据，并且这些数据会转移到C进行存储。
 *             受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响
 *        （2）扩展性好：如需要需要增加一台节点X，X的位置在A和B之间，那受到影响的也就是A到X之间的数据，重新把A到X的数据录入到X上即可，不会导致hash取余全部数据重新洗牌。
 *  缺点：（1）数据倾斜问题： 一致性Hash算法在服务节点太少时，容易因为节点分布不均匀而造成数据倾斜（被缓存的对象大部分集中缓存在某一台服务器上）
 *
 * 【三：哈希槽分片】
 *  哈希槽实质就是一个数组，数组[0,2^14 -1]形成hash slot空间。
 *   在数据和对应节点之间又加入了一层哈希槽（slot），用于管理数据和节点之间的关系。
 *  槽位：redis集群设有 16384 个哈希槽（记着就行），集群的每个master负责一部分哈希槽
 *   如当前集群有三个节点，每个节点负责一些槽位，如节点1负责0-5460，节点2负责5461-10922，节点3负责10923-16384 （分片）
 *   接下来只需要通过确定的算法，决定当前命令将由哪些槽位负责（由哪些节点负责即可）
 *   （CRC算法： CRC16(key) % 16384）
 *  ✔优点：哈希槽分片最大的好处是方便扩容和缩容，比如在上述例子中想要添加节点4，只需要将节点1 2 3 中的槽位匀给节点4即可，由于槽位的移动并不会
 *   停止服务，所以扩容和缩容并不会造成集群不可用的状态
 *  ✔缺点：Redis集群不保证 强一致性，这意味着在特定的条件下，Redis集群可能会丢掉一些被系统收到的写入请求命令
 *           （比如某节点在同步数据给其slave时宕机，其实slave上位时会有部分数据丢失）
 *
 * 【关于为什么redis集群的最大槽数是16384】
 *（1）因为每秒钟，redis节点需要发送一定数量的ping消息作为心跳包，如果槽位为65536，这个ping消息的消息头太大了，浪费带宽
 *（2）集群的节点越多，心跳包的消息体内携带的数据就越多。如果节点过1000个，也会导致网络拥堵。
 *    因此redis作者不建议redis cluster节点数量超过1000个。那么，对于节点数在1000以内的redis cluster集群，16384个槽位够用了。没有必要拓展到65536个。
 *（3）槽位越小，节点少的情况下，压缩比高，容易传输
 *
 *
 @author Alex
 @create 2023-04-01-10:29
 */
public class UBF13 {
}
