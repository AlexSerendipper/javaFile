package databaseobject;

import org.junit.Test;

/**
 *【常见数据库对象汇总】
 *  表(TABLE)： 表是存储数据的逻辑单元，以行和列的形式存在，列就是字段，行就是记录
 *  数据字典：就是系统表，存放数据库相关信息的表。系统表的数据通常由数据库系统维护，程序员通常不应该修改，只可查看
 *  约束：执行数据校验的规则，用于保证数据完整性的规则
 *  视图(VIEW)： 一个或者多个数据表里的数据的逻辑显示，视图并不存储数据
 *  索引(INDEX)： 用于提高查询性能，相当于书的目录
 *  存储过程(PROCEDURE)：用于完成一次完整的业务处理，没有返回值，但可通过传出参数将多个值传给调用环境
 *  存储函数(FUNCTION)：用于完成一次特定的计算，具有一个返回值
 *  触发器(TRIGGER)：相当于一个事件监听器，当数据库发生特定事件后，触发器被触发，完成相应的处理
 *
 *【视图】
 * (1)创建和查看视图
 *  视图是一种 虚拟表 ，本身是 不具有数据 的，占用很少的内存空间，它是 SQL 中的一个重要概念。
 *  视图建立在已有表的基础上, 视图赖以建立的这些表称为基表。
 *  视图的创建和删除只影响视图本身，不影响对应的基表，可以把视图看作是一个虚拟表✔✔但是当对视图中的数据进行增加、删除和修改操作时，数据表中的数据会相应地发生变化，反之亦然。
 *  视图，是向用户提供基表数据的另一种表现形式。向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为存储起来的 SELECT 语句
 *  CREATE VIEW 视图名称(字段别名)                       # 方式一：查询语句中，没有为字段起别名，可以在此处为字段命别名。若用此种方式，别名必须与查询语句中的字段一一对应
 *   AS 查询语句                                          # 方式二：查询语句中，字段的别名会作为视图中字段的名称出现
 *  当我们创建好一张视图之后，还可以在它的基础上继续创建视图。只需要把视图当作一张表，在SELECT的时候选用即可
 *  SHOW TABLES;                     # 查看当前数据库的表对象和视图对象
 *  DESC / DESCRIBE 视图名称;         # 查看视图的结构
 *  SHOW TABLE STATUS LIKE '视图名称'\G                 # 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）
 *  SHOW CREATE VIEW 视图名称;        # 查看视图的详细定义信息
 * (2)了解：不可更新视图的情况：仅当视图中的行和底层基本表中的行之间存在 一对一 的关系时才可正常更新视图
 *  在定义视图的SELECT语句中使用了 JOIN联合查询 ，视图将不支持INSERT和DELETE操作；
 *  在定义视图的SELECT语句后的字段列表中使用 DISTINCT、聚合函数 、GROUP BY 、HAVING、UNION等，视图将不支持INSERT、UPDATE、DELETE；
 *  在定义视图的时候指定了“ALGORITHM = TEMPTABLE”，视图将不支持INSERT和DELETE操作；
 *  视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作；
 *  在定义视图的SELECT语句后的字段列表中使用了 数学表达式 或 子查询 ，视图将不支持INSERT，也不支持UPDATE使用了数学表达式、子查询的字段值；
 *  在定义视图的SELECT语句中包含了子查询，而子查询中引用了FROM后面的表，视图将不支持INSERT、UPDATE、DELETE；
 *  视图定义基于一个 不可更新视图 ；
 *  常量视图
 * (3)修改视图
 *  CREATE OR REPLACE VIEW 视图名称(字段别名)           # 方式一：如果不存在就创建视图，存在就替换视图
 *    AS 查询语句
 *  ALTER VIEW 视图名称(字段别名)                       # 方式二：修改视图
 *   AS 查询语句
 * (3)删除视图
 *  DROP VIEW IF EXISTS 视图名称;
 *
 * 【视图的不足】
 * 如果我们在实际数据表的基础上创建了视图，那么，如果实际数据表的结构变更了，我们就需要及时对相关的视图进行相应的维护。
 * 特别是嵌套的视图（就是在视图的基础上创建视图），维护会变得比较复杂
 *
 @author Alex
 @create 2023-01-18-16:17
 */
public class UDO01 {
    // 我们常常会使用视图，对数据进行格式化的操作
    @Test
    public void test(){
        /*
        CREATE VIEW emp_depart
        AS
        SELECT CONCAT(last_name,'(',department_name,')') AS emp_dept
        FROM employees e JOIN departments d
        WHERE e.department_id = d.department_id
         */
    }
}
