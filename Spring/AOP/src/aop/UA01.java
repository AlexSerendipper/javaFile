package aop;

import org.junit.Test;

/**
 * 【AOP简介】
 *  面向切面编程（方面），利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。
 *  通俗描述：不通过修改源代码方式，在主干功能里面添加新功能
 *
 * 【AOP底层原理】
 *  AOP 底层使用动态代理
 *  接下来统一采用 被增强类（代理类）和 增强类（代理类）来叙述
 *（1）有接口时，使用 JDK 动态代理（java反射时学过✔）
 *     因为动态代理对象能实现与传入的 被代理类完全相同功能，所以可以在生成动态代理对象中，集成一些新的功能，这样就完全无需改变被代理类的代码~
 *（2）没有接口时，使用 CGLIB 动态代理
 *     即创建被代理对象的子类，作为代理对象
 *      在子类中重写父类的同名方法，在其中引用父类的中的方法，加上新的功能（代码）。即为CGLIB 动态代理
 *
 *【AOP常见术语】
 *  连接点：类中哪些方法可以被增强，这些方法称为连接点
 *  切入点：实际被真正增强的方法，称为切入点
 *  通知（增强）：实际被增强方法中的 逻辑部分 被称为通知（增强）
 *                通知有多种类型：前置通知（在切入点之前执行）
 *                              后置通知（在切入点之后执行）
 *                              环绕通知（在切入点前后执行）
 *                              异常通知（切入点出现异常后执行）
 *                              最终通知（不论是否有异常，都会执行，类似于trycatch中的finally）
 *  切面：切面指的是一个过程，把通知添加到切入点的过程，称为切面
 *
 @author Alex
 @create 2023-02-23-13:29
 */
public class UA01 {
    @Test
    public void test1(){
        System.out.println(50*15/60);
    }
}
