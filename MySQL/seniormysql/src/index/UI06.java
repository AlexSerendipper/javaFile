package index;

/**
 * 【innoDB行格式】✔之前讲的是数据页，对应的是一页数据，这里讲的是行格式，对应的是一行记录
 *  create table xxx () ROW_FORMAT = 行格式名称　　　　　　　　　　　# 创建指定行格式的表
 *  alter table xxx ROW_FORMAT = 行格式名称                         # 修改表为指定的行格式
 *  行格式一般有Compact，Dynamic，Compressed和Redundant几种。
 *
 * 【COMPACT行格式】
 *（1）变长字段长度列表
 *  在mysql数据库中，VARCHAR(M),VARBINARY(M),TEXT，BLOB类型都是变长的。变长字段的长度列表其实就是需要记录字段实际存储的长度。
 *    注意，变长字段列表记录存储长度的顺序与我们变量声明的顺序是反过来的。比如我们声明两个Varchar字段的顺序是a(15),b(10),那么变长字段列表的存储的长度顺序就是10，15.
 *（2）Null值列表
 *  Compact行格式会把Null值列统一管理起来。当然，如果表中不允许存放Null值，那么Null值列表就不存在了。
 *（3）记录头信息
 *    delete_mask:该记录是否被删除。如果这个值是0，说明记录没有被删除，否则说明记录被删除。由此可知记录删除是采用的逻辑删除，这是因为我们记录之间是紧密相连的，
 *                  如果真正删除一个记录，将会需要导致后面的记录依次进行位移，导致性能消耗。所有被删除的记录会通过next_record构成一个垃圾链表,它们所占用的空间称为可重用空间（之后若有新记录插入，可能把这些可重用空间复用）。
 *    min_rec_mask: B+树中，非叶子节点（目录项记录页）的最小记录都会添加该标记（min_rec_mask=1）
 *    Record_type:记录类型，0表示普通记录，1表示B+树的非叶子节点(目录页节点)、2表示最小记录，3表示最大记录。
 *    heap_no:表示当前记录在本页中的位置。通常第一条记录的 heap_no 从2开始。 0和1 标识mysql自动创建的两条虚拟记录（最小记录和最大记录），位于记录链表的最前面位置。由于这两个记录不是我们创建的，因此并没有存储在用户空间中，而是放在Infimum和Supermun部分✔
 *    n_owned:页目录中每个组的最后一条记录会存储该组的记录数，作为n_owned字段。
 *    next_record:它表示当前记录的真实数据到下一个记录的真实数据之间的偏移量。
 *  例子：若删除第2条记录，首先第2条记录的delete_mask将标记为1，next_record标记为0（默认值）。它前一个节点第一条记录的next_record会指向第3条记录。同时最大记录中的n_owned属性值变为4.
 *（4）记录的真实数据
 *  真实数据里除了真实列还存储了三个隐藏列 DB_ROW_ID， DB_TRX_ID， DB_ROW_PTR。
 *    DB_ROW_ID：若表中无主键，也声明了唯一标识其它列，在这种情况下就是会添加一个row_id的隐藏列。
 *    DB_TRX_ID：事务ID，在之后章节中讲解
 *    DB_ROW_PTR：回滚指针，在之后章节中讲解
 *
 * 【Dynamic和Compressed行格式】Dynamic为MySQL5.7默认的行格式
 *  行溢出：65535字节是VarCahr类型存储的最大长度，但是因为VARCHAR的数据是变长的，需要2个字节额外的空间来记录数据的长度，1个字节标识NULL值信息，因此存储空间只能达到65532字节。
 *           一个页的大小是16kb，也就是16384字节，而现在我们一个字段(一个VARCHAR类型的列)就能存储65532个字节，这样出现一个页存放不了一条记录，这种现象称为行溢出。
 *            在Compact和Ruduntant两种行格式中，对于占用空间非常大的列，在存储真实数据时只会存储真实数据的一部分。将剩余的数据存储到其它页中进行分页存储。然后再存储真实数据处，用20个字节存储指向这些页的地址~
 *  Dynamic和Compressed行格式与Compact大体是相同的，不过这两种行格式对于行溢出的处理策略与Compact不同。
 *    Dynamic 和 Compressed：采用了完全行溢出的策略，也就是数据页不存储任何溢出真实数据，只是存储指针，将真实数据完全存储到其它页中。
 *    Compact 和 Redundant: 会在记录真实数据处存储一部分的数据
 *    Compressed还采用了zlib算法对数据进行压缩，因此对于BLOB、TEXT、VARCHAR等大长度类型的数据能够进行有效的存储。
 *
 * 【Redundant行格式】了解。MySQL5.0及以前默认的行格式
 *  Redundant采用字段长度偏移列表来定位数据，而Compact采用变长字段长度列表和Null值列表。如果是Compact行格式，不是变长数据就不会记录变长字段长度列表。而Redundant行格式必须所有列(包括隐藏列)的偏移长度都逆序进行记录，因此其名字是Redundant(冗余的)。
 *
 @author Alex
 @create 2023-05-18-10:28
 */
public class UI06 {

}
