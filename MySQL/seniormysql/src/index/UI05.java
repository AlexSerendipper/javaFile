package index;

/**
 * 【数据页】索引底层的数据存储结构
 *  索引给我们提供了高效的索引方式，不过索引信息以及数据记录都是保存在文件上的，确切来说是存储在页结构中。
 *   由于InnoDB是MySQL的默认存储引擎，所以本章节讲解InnoDB存储引擎的数据存储结构
 *  概述：InnoDB将数据划分为若干个页，InnoDB中页的默认大小为16KB
 *   页作为磁盘和内存之间交互的基本单位，也就是一次最少从磁盘中读取16KB的内容到内存中，一次最少把16KB的内容刷新到磁盘中。
 *   也就是说，在数据库中，不论读一行还是读多行，都是将这些行所在的页进行加载。也就是说数据库管理存储空间的基本单位是页，数据库I/O操作的最小单位也是页。一个页中可以存储多个行记录
 *  结构特点：各个页可以不在物理结构上相连，只要通过双向链表相关联即可。每个数据页中的记录会按照主键值从小到大的顺序组成一个单向链表，每个数据页都会为存储在它里边的记录生成一个页目录。
 *   在通过主键查找某条记录的时候可以在页目录中使用二分法快速定位到对应的槽，然后再遍历该槽对应分组中的记录即可快速找到指定的记录。
 *
 * 【页的内部结构】✔
 *  页如果按照类型划分，可以分为： 数据页(保存b+树节点)、系统页、Undo页和事务数据页。其中数据页是我们最常使用的页
 *  页可以被划分为如下七个部分: 文件头、页头、最大记录及最小记录、用户记录、空闲记录、页目录、文件尾
 *（1）第一部分：文件头（File Header）与文件尾(File Trailer): 主要是用于描述页的通用信息，用于页与页的交互或者数据的校验等。
 *  文件头中包含的内容
 *     FILE_PAGE_OFFSET：记录页编号，InnoDB可以通过页号唯一确定一个页。
 *     FILE_PAGE_TYPE: 代表当前页的类型，比如FILE_PAGE_UNDO_LOG(Undo日志页)、FILE_PAGE_TYPE_SYS(系统页）、FILE_PAGE_INDEX(索引页/数据页)。
 *     FILE_PAGE_PREV与FILE_PAGE_NEXT: 上一页与下一页。建立一个双向链表保证这些页不是物理上的连续而是逻辑上的连续。
 *     FILE_PAGE_SAPCE_OR_CHKSUM: 校验和，对于一个较长的字符串，通过某种算法来计算要给比较短的值来代表这个很长的字符串，这个比较短的字符串就成为校验和
 *                                  在比较两个长字符串之前，先比较两个字符串的校验和~
 *     FILE_PAGE_LSN:日志序列号，记录文件最后修改时对应的日志序列位置。尾部也有该字段，同样是为了校验页面的完整性。
 *  文件尾页中包含的内容
 *     FILE_PAGE_SAPCE_OR_CHKSUM: 文件尾页同样有校验和，若该页的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中，但是如果在同步过程中断电，可能造成该页的传输不完整
 *                                 这时可以把文件尾的校验和与文件头的校验和进行比较，如果两个值不相同，则说明传输存在问题
 *     FILE_PAGE_LSN:日志序列号，记录文件最后修改时对应的日志序列位置。尾部也有该字段，同样是为了校验页面的完整性。
 * （2）第二部分(主要空间)：空闲空间(FreeSpace)、最大/小记录(Infimum/Supremum)、用户记录(User record)
 *     空闲空间: 我们会将已存储的数据按照 ✔指定行格式 放到 User Records，每插入一个数据，就会从Free Space申请一个记录大小的空间划分到User Records，直到Free Space都被转化为User Records空间，会申请一个新的页。User Records中的数据是按照单链表进行连接的
 *     用户记录：需要存储的记录按照 指定的行格式 一条条摆在User Records中，相互间形成单链表
 *               单链表是通过指定的行格式指定，指定的行格式见下一个部分
 *     最大/小记录：与用户需要存储的记录是同一个类型，也遵循指定的行格式（下一部分），只不过这两条记录不是我们自定义的记录，所以它们并不存在在页的User Records中，而被单独存放
 *
 * （3）第三部分：页目录（page directory）与页头（page header）
 *     页目录: 遍历某叶子节点中的数据时，若顺序遍历，检索效率低下，故使用页目录的方式，将所有记录分成几个组
 *              第一组，也就是最小记录所在的分组 单独为1组，最大记录所在组一般是有1-8条记录，其它组一般有4-8条记录（不包括已删除的记录）。
 *              每组的最后一条记录会存储一个n_owned属性，代表该组有几个记录
 *              ✔页目录就是用来存储最后一条记录的地址偏移量，也称之为槽（slot），即每个槽相当于指针指向了不同组的最后一个记录
 *              利用页目录，对数据进行二分查找，能大大提高效率
 *     页头: 储存了一个数据页中的状态信息，比如本页中存储了多少条记录、第一条记录的地址、页目录中存储了多少个槽位等等...
 *
 *
 @author Alex
 @create 2023-05-16-15:19
 */
public class UI05 {
}
