package usegit;

/**
 * 【Git介绍】
 *  Git是一个免费的、开源的分布式版本控制系统
 *  版本控制是一种记录文件内容变化，以便将来查阅特定版本修订情况的系统。
 *  为什么需要版本控制？
 *    版本控制工具让开发由个人转为团队（小红小蓝同时修改服务器端的代码，很有可能小蓝的代码会覆盖小红的代码，我们需要专业的版本控制工具来合并二人的修改）
 *
 *
 * 【分布式版本控制 VS 集中式版本控制】
 * （1）集中式版本控制。如SVN
 *  集中化的版本控制系统诸如 CVS、 SVN 等，都有一个单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端连到这台服务器，
 *   取出最新的文件或者提交更新。（所有的代码都上传到一个服务器上统一管理）
 *   但是这么做显而易见的缺点是中央服务器的单点故障：如果中央服务器服务器宕机一小时，那么在这一小时内，谁都无法提交更新，也就无法协同工作！
 *  集中式版本控制通常只记录修改的内容，即差异比较。这样做虽然节省磁盘空间但是效率很低。
 * （2）分布式版本控制。如GIT
 *  分布式版本控制的思想是每个人在自己的本地进行版本控制，在进行版本控制前，先从远程仓库（如GITHUB）拉取完整代码，然后进行修改后再推送回去，
 *   这样就解决了集中式版本控制系统的缺陷：1、服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）
 *                                    2、每个客户端保存的也都是整个完整的项目（包含历史记录， 更加安全）。这样任何一处协同工作用的文件发生故障， 事后都可以用其他客户端的本地仓库进行恢复
 *  由于GIT是直接记录快照，而非差异比较（对于修改的文件另存备份，未修改的文件保存为链接，指向源文件），这样虽然占用空间大，但非常效率极高
 *
 * 【Git工作机制概述】
 * （1）三个工作区
 *  工作区： 工作区实际上就是我们进行版本控制的文件，我们的本地文件咯。可以进行增删操作，不会留有历史记录
 *  暂存区（暂时储存，staged）：就是暂时存储我们修改文件的区域。可以进行增删操作
 *  本地库（最终储存，committed）:提交到本地库，就会生成对应的历史版本。一般不能进行增删操作
 * （2）代码托管中心
 *  代码托管中心：是基于网络服务器的远程代码仓库，一般我们简单称为远程库。
 *  局域网远程仓库：如GitLab
 *  互联网远程仓库：如GitHub（外网）、Gitee 码云（国内网站）
 *
 * 【Git安装】
 *  官网下载，一路安装即可
 *  安装完成后使用GIT BASH进行操作，GIT BASH中通用Linux命令！
 *
 * 【Git初始化后】.git文件夹的文件概述
 *  ./HEAD                         # 记录了当前处于哪个分支
 *   ./refs/heads/master            # 记录了当前的版本号
 @author Alex
 @create 2023-01-23-17:50
 */
public class UG01 {
}
