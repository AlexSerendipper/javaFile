package index;

/**
 * 【索引的设计原则】
 *  为了使索引的使用效率更高，在创建索引时，必须考虑在哪些字段上创建索引和创建什么类型的索引。
 *   索引设计不合理或者缺少索引都会对数据库和应用程序的性能造成障碍。
 *  ✔✔主从复制，主机会将写操作记录在bin-log日志中。从机读取bin-log日志，执行语句来同步数据。如果使用函数来操作数据，会导致从机和主机操作时间不一致。所以，默认情况下，mysql不开启创建函数设置。
 *     set global log_bin_trust_function_creators = 1;              # mysql是否允许创建函数
 *
 * 【哪些情况适合创建索引】
 * 1. 字段中的数值 有唯一性的限制 的字段
 * 2. 频繁作为 WHERE 查询条件的字段
 * 3. 经常 GROUP BY 和 ORDER BY 的字段：  如果待排序的列有多个，那么可以在这些列上建立联合索引。
 *     多个单列索引在多条件查询时 只会生效一个索引(MySQL会选择其中一个限制最严格的作为索引)，所以在多条件联合查询的时候 最好创建联合索引
 * 4. UPDATE、DELETE 的 WHERE 条件列（字段）
 * 5. DISTINCT的字段需要创建索引
 * 6. 多表 JOIN 连接操作时，创建索引注意事项
 *     连接表的数量尽量不要超过 3 张，因为每增加一张表就相当于增加了一次嵌套的循环，数量级增长会非常快，严重影响查询的效率。
 *     对 WHERE 条件创建索引
 *     当对用于连接的字段创建索引时，必须保证该字段在多张表中的类型必须一致。
 * 7.使用列的类型小的创建索引
 *     以整数类型为例，有TINYINT、MEDIUNINT、INT、BIGINT等，它们占用的存储空间依次递增，能表示的整数范围当然也是依次递增。
 *      如果我们想要对某个整数列建立索引的话，在表示的整数范围允许的情况下，尽量让索引列使用较小的类型，比如我们能使用INT就不要使用BIGINT，能使用MEDIUMINT就不要使用INT。这是因为:
 *     数据类型越小，在查询时进行的比较操作越快
 *     数据类型越小，索引占用的存储空间就越少，在一个数据页内就可以放下更多的记录（B+树更加扁平），从而减少磁盘I/O带来的性能损耗，也就意味着可以把更多的数据页缓存在内存中，从而加快读写效率。
 * 8.使用字符串前缀创建索引
 *     当要对字符串所在的字段创建索引，假设我们的字符串很长，B+树索引中的记录需要把该列的完整字符串存储起来，费时！而且字符串越长，在索引中占用的存储空间越大
 *      并且做字符串比较时会占用更多的时间。
 *     我们可以通过截取字段的前面一部分内容建立索引，这个就叫 前缀索引。这样在查找记录时虽然不能精确的定位到记录的位置，但是能定位到相应前缀所在的位置，
 *      然后根据前缀相同的记录的主键值回表查询完整的字符串值。既 节约空间，又 减少了字符串的比较时间，还大体能解决排序的问题。
 *     如： create table shop(address varchar(120) not null);
 *           alter table shop add index(address(12));
 * 9.区分度高(散列性高)的列适合作为索引
 *     列的基数指的是某一列中不重复数据的个数，比方说某个列包含值2,5,8,2,5,8,2,5,8，虽然有9条记录，但该列的基数却是3。
 *      也就是说，在记录行数一定的情况下，列的基数越大，该列中的值越分散；列的基数越小，该列中的值越集中。
 *      这个列的基数指标非常重要，直接影响我们是否能有效的利用索引。最好为列的基数大的列建立索引，为基数太小的列建立索引效果可能不好。
 *      可以使用公式select count(distinct a)/count(*) from t1计算区分度，越接近1越好，一般超过33%就算是比较高效的索引了。
 * 10.使用最频繁的列放到联合索引的左侧
 *     这样也可以较少的建立一些索引。同时，由于"最左前缀原则"，可以增加联合索引的使用率。
 * 11.在多个字段都要创建索引的情况下，联合索引优于单值索引
 *
 * 【为什么需要限制索引的数目？】
 *  在实际工作中，我们也需要注意平衡，索引的数目不是越多越好。我们需要限制每张表上的索引数量，建议单张表索引数量不超过6个。
 *    原因：① 每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。
 *          ② 索引会影响 INSERT、DELETE、UPDATE等语句的性能，因为表中的数据更改的同时，索引也会进行调整和更新，会造成负担。
 *          ③ 优化器在选择如何优化查询时，会根据统一信息，对每一个可以用到的索引来进行评估，以生成出一个最好的执行计划，如果同时有很多个索引都可以用于查询，会增加MySQL优化器生成执行计划时间，降低查询性能。
 *
 * 【哪些情况不适合创建索引】
 * 1. 在where中使用不到的字段，不要设置索引
 * 2. 数据量小的表最好不要使用索引
 * 3. 有大量重复数据的列上不要建立索引
 * 4. 避免对经常更新的表创建过多的索引
 *     第一层含义︰频繁更新的字段不一定要创建索引。因为更新数据的时候，也需要更新索引，如果索引太多，在更新索引的时候也会造成负担，从而影响效率。
 *     第二层含义:避免对经常更新的表创建过多的索引，并且索引中的列尽可能少。此时，虽然提高了查询速度，同时却会降低更新表的速度。
 * 5. 不建议用无序的值作为索引
 * 6. 删除不再使用或者很少使用的索引
 * 7. 不要定义冗余或重复的索引
 *     比如，定义了 index(a,b,c)，那么index(a)，index(a,b)都算是冗余的索引
 *     比如，定了了 col1 是主键，那么又给它定义为一个唯一索引 这就是重复索引
 *
 @author Alex
 @create 2023-05-19-14:17
 */
public class UI09 {
}
